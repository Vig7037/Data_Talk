from dotenv import load_dotenv
load_dotenv()  # Load all the environment variables

import streamlit as st
import os
import sqlite3

import google.generativeai as genai
# Configure Genai Key

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function To Load Google Gemini Model and provide queries as response

def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0], question])
    return response.text

# Function To retrieve query from the database

def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    try:
        cur.execute(sql)
        rows = cur.fetchall()
    except sqlite3.Error as e:
        conn.close()
        return f"An error occurred: {e}", None
    conn.commit()
    conn.close()
    return None, rows

# Define Your Prompt
prompt = [
    """
    You are an expert in converting English questions to SQL query!
    The SQL database has the name STUDENT and has the following columns - NAME, CLASS, 
    SECTION. \n\nFor example,\nExample 1 - How many entries of records are present?, 
    the SQL command will be something like this: SELECT COUNT(*) FROM STUDENT;
    \nExample 2 - Tell me all the students studying in Data Science class?, 
    the SQL command will be something like this: SELECT * FROM STUDENT 
    where CLASS='Data Science'; 
    Also, the SQL code should not have ``` in the beginning or end and sql word in output.
    """
]

# Documentation

def display_documentation():
    st.title("Intelligent Chat Interface SQL Query App Documentation")
    st.header("Overview")
    st.write("""
        This application leverages Google's Gemini model to translate natural language questions into SQL queries, 
        which are then executed on an SQLite database. The results are displayed through a Streamlit web interface, 
        providing a seamless experience for querying and retrieving database information.
    """)

    st.header("Functionality")
    st.write("""
        - **get_gemini_response(question, prompt)**: 
            - **Purpose**: Converts a natural language question into an SQL query using the Gemini model.
            - **Parameters**: 
                - `question` (str): The natural language question asked by the user.
                - `prompt` (list of str): The prompt providing context to the AI model for query generation.
            - **Returns**: 
                - `response.text` (str): The SQL query generated by the AI model.
        - **read_sql_query(sql, db)**: 
            - **Purpose**: Executes the given SQL query on the specified SQLite database and returns the results.
            - **Parameters**: 
                - `sql` (str): The SQL query to be executed.
                - `db` (str): The path to the SQLite database file.
            - **Returns**: 
                - `rows` (list of tuples): The results fetched from the executed query.
    """)

    st.header("Usage")
    st.write("""
        1. **Ask a Question**: 
            - Use the chat input box provided in the main application to enter a natural language question related to the database.
        2. **Get Response**: 
            - The AI model processes your question, converts it into an appropriate SQL query, and executes it against the database.
        3. **Display Results**: 
            - The results of the SQL query are retrieved from the database and displayed on the app interface for easy viewing.
    """)

    st.header("Example Questions")
    st.write("""
        - **How many entries of records are present?**
            - **SQL Query**: `SELECT COUNT(*) FROM STUDENT;`
        - **Tell me all the students studying in Data Science class?**
            - **SQL Query**: `SELECT * FROM STUDENT WHERE CLASS='Data Science';`
    """)

# Streamlit App

def main():
    st.set_page_config(
        page_title="Intelligent SQL Query Chat App",
        page_icon="ðŸ“Š",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Main App", "Documentation"])
    
    if page == "Main App":
        st.title("Intelligent Chat App To Retrieve SQL Data")
        st.write("### Use natural language to query your database effortlessly.")

        question = st.text_input("Ask something related to the database:")
        
        if question:
            with st.spinner("Generating SQL query and retrieving data..."):
                response = get_gemini_response(question, prompt)
                response = response.replace("```", "").replace("sql", "")
                st.write(f"Generated SQL query: `{response}`")  # Debugging: show the generated query
                error, results = read_sql_query(response, "student.db")
                if error:
                    st.error(error)
                else:
                    st.subheader("The Response is")
                    for row in results:
                        st.write(f"**{row}**")

    elif page == "Documentation":
        display_documentation()

if __name__ == "__main__":
    main()
